//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DotNetService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DotNetService.IService1")]
    public interface IService1
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertUser", ReplyAction="http://tempuri.org/IService1/InsertUserResponse")]
        string InsertUser(string Last_Name, string Given_Name, string Middle_Name, string Suffix, string Email_Address, string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertUser", ReplyAction="http://tempuri.org/IService1/InsertUserResponse")]
        System.Threading.Tasks.Task<string> InsertUserAsync(string Last_Name, string Given_Name, string Middle_Name, string Suffix, string Email_Address, string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AccountAuthenticate", ReplyAction="http://tempuri.org/IService1/AccountAuthenticateResponse")]
        bool AccountAuthenticate(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AccountAuthenticate", ReplyAction="http://tempuri.org/IService1/AccountAuthenticateResponse")]
        System.Threading.Tasks.Task<bool> AccountAuthenticateAsync(string Username, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccount", ReplyAction="http://tempuri.org/IService1/UpdateAccountResponse")]
        string UpdateAccount(string Username, string NewUsername, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateAccount", ReplyAction="http://tempuri.org/IService1/UpdateAccountResponse")]
        System.Threading.Tasks.Task<string> UpdateAccountAsync(string Username, string NewUsername, string NewPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsertInfo", ReplyAction="http://tempuri.org/IService1/GetUsertInfoResponse")]
        DotNetService.GetUsertInfoResponse GetUsertInfo(DotNetService.GetUsertInfoRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsertInfo", ReplyAction="http://tempuri.org/IService1/GetUsertInfoResponse")]
        System.Threading.Tasks.Task<DotNetService.GetUsertInfoResponse> GetUsertInfoAsync(DotNetService.GetUsertInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSpamCounter", ReplyAction="http://tempuri.org/IService1/GetSpamCounterResponse")]
        int GetSpamCounter(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSpamCounter", ReplyAction="http://tempuri.org/IService1/GetSpamCounterResponse")]
        System.Threading.Tasks.Task<int> GetSpamCounterAsync(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSpamCounter", ReplyAction="http://tempuri.org/IService1/UpdateSpamCounterResponse")]
        void UpdateSpamCounter(string Username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSpamCounter", ReplyAction="http://tempuri.org/IService1/UpdateSpamCounterResponse")]
        System.Threading.Tasks.Task UpdateSpamCounterAsync(string Username);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUsertInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUsertInfoRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Username;
        
        public GetUsertInfoRequest()
        {
        }
        
        public GetUsertInfoRequest(string Username)
        {
            this.Username = Username;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUsertInfoResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUsertInfoResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Last_Name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Given_Name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string Middle_Name;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string Suffix;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public string Email_Address;
        
        public GetUsertInfoResponse()
        {
        }
        
        public GetUsertInfoResponse(string Last_Name, string Given_Name, string Middle_Name, string Suffix, string Email_Address)
        {
            this.Last_Name = Last_Name;
            this.Given_Name = Given_Name;
            this.Middle_Name = Middle_Name;
            this.Suffix = Suffix;
            this.Email_Address = Email_Address;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface IService1Channel : DotNetService.IService1, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class Service1Client : System.ServiceModel.ClientBase<DotNetService.IService1>, DotNetService.IService1
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public Service1Client() : 
                base(Service1Client.GetDefaultBinding(), Service1Client.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IService1.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), Service1Client.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(Service1Client.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public string InsertUser(string Last_Name, string Given_Name, string Middle_Name, string Suffix, string Email_Address, string Username, string Password)
        {
            return base.Channel.InsertUser(Last_Name, Given_Name, Middle_Name, Suffix, Email_Address, Username, Password);
        }
        
        public System.Threading.Tasks.Task<string> InsertUserAsync(string Last_Name, string Given_Name, string Middle_Name, string Suffix, string Email_Address, string Username, string Password)
        {
            return base.Channel.InsertUserAsync(Last_Name, Given_Name, Middle_Name, Suffix, Email_Address, Username, Password);
        }
        
        public bool AccountAuthenticate(string Username, string Password)
        {
            return base.Channel.AccountAuthenticate(Username, Password);
        }
        
        public System.Threading.Tasks.Task<bool> AccountAuthenticateAsync(string Username, string Password)
        {
            return base.Channel.AccountAuthenticateAsync(Username, Password);
        }
        
        public string UpdateAccount(string Username, string NewUsername, string NewPassword)
        {
            return base.Channel.UpdateAccount(Username, NewUsername, NewPassword);
        }
        
        public System.Threading.Tasks.Task<string> UpdateAccountAsync(string Username, string NewUsername, string NewPassword)
        {
            return base.Channel.UpdateAccountAsync(Username, NewUsername, NewPassword);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DotNetService.GetUsertInfoResponse DotNetService.IService1.GetUsertInfo(DotNetService.GetUsertInfoRequest request)
        {
            return base.Channel.GetUsertInfo(request);
        }
        
        public string GetUsertInfo(string Username, out string Given_Name, out string Middle_Name, out string Suffix, out string Email_Address)
        {
            DotNetService.GetUsertInfoRequest inValue = new DotNetService.GetUsertInfoRequest();
            inValue.Username = Username;
            DotNetService.GetUsertInfoResponse retVal = ((DotNetService.IService1)(this)).GetUsertInfo(inValue);
            Given_Name = retVal.Given_Name;
            Middle_Name = retVal.Middle_Name;
            Suffix = retVal.Suffix;
            Email_Address = retVal.Email_Address;
            return retVal.Last_Name;
        }
        
        public System.Threading.Tasks.Task<DotNetService.GetUsertInfoResponse> GetUsertInfoAsync(DotNetService.GetUsertInfoRequest request)
        {
            return base.Channel.GetUsertInfoAsync(request);
        }
        
        public int GetSpamCounter(string Username)
        {
            return base.Channel.GetSpamCounter(Username);
        }
        
        public System.Threading.Tasks.Task<int> GetSpamCounterAsync(string Username)
        {
            return base.Channel.GetSpamCounterAsync(Username);
        }
        
        public void UpdateSpamCounter(string Username)
        {
            base.Channel.UpdateSpamCounter(Username);
        }
        
        public System.Threading.Tasks.Task UpdateSpamCounterAsync(string Username)
        {
            return base.Channel.UpdateSpamCounterAsync(Username);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IService1))
            {
                return new System.ServiceModel.EndpointAddress("http://10.0.2.2:8733/Design_Time_Addresses/Dotnet4WebService/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return Service1Client.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return Service1Client.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IService1);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IService1,
        }
    }
}
